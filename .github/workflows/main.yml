name: Build Mod DLL # 工作流的名称

on: # 触发工作流的事件
  push: # 当发生 push 事件时触发
    branches: [ main ] # 指定是在推送到 main 分支时触发
  pull_request: # 当发生 pull_request 事件时触发
    branches: [ main ]

jobs:
  build: # 定义一个名为 build 的任务
    runs-on: windows-latest # 使用 GitHub 提供的最新 Windows 虚拟机环境（因为 .NET Framework 需要 Windows）

    steps:
    # 1. 获取代码
    - name: Checkout code
      uses: actions/checkout@v4 # 官方 action，用于签出你的代码
      with:
        submodules: recursive # 如果你使用了子模块，请取消注释这行

    # 2. 安装 .NET Framework 环境（实际上主机已安装，此步骤主要设置 MSBuild 路径）
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # 3. 还原 NuGet 包（如果你使用了 NuGet 包）
    - name: Restore NuGet Packages
      run: msbuild /t:restore YOUR_SOLUTION_NAME.sln
      # 将 YOUR_SOLUTION_NAME.sln 替换为你的解决方案文件的实际名称

    # 4. 构建解决方案
    - name: Build Solution
      run: msbuild YOUR_SOLUTION_NAME.sln /p:Configuration=Release /p:Platform="Any CPU" /p:OutputPath=build_output
      # Configuration: 发布模式构建，优化代码
      # Platform: 目标平台
      # OutputPath: 输出目录，这里指定为 build_output 文件夹

    # 5. 上传构建产物（Artifact）
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Simmai-Assist-Mod # 产物的名称
        path: build_output/ # 要打包上传的路径，就是我们上一步指定的输出目录
        # 你可以使用 path: build_output/Simmai-Assist.dll 来只上传单个文件
